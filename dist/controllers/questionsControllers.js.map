{"version":3,"sources":["../../server/controllers/questionsControllers.js"],"names":["Question","createQuestion","req","res","bodyOfRequest","body","userExist","usersModels","signUsers","find","user","userId","confirmMeetup","meetupsModels","meetups","meetup","meetupId","title","status","json","error","createdQuestion","questionsModels","askQuestion","data","upvote","idOfQuestion","params","questionId","doesQuestionExist","findQ","requestUpvote","downvote","requestDownvote"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AACfC,gBADe,0BACAC,GADA,EACKC,GADL,EACU;AACvB,QAAMC,gBAAgBF,IAAIG,IAA1B;AACA,QAAMC,YAAYC,sBAAYC,SAAZ,CAAsBC,IAAtB,CAA2B;AAAA,aAAQC,KAAKC,MAAL,KAAgBP,cAAcM,IAAtC;AAAA,KAA3B,CAAlB;AACA,QAAME,gBAAgBC,wBAAcC,OAAd,CAAsBL,IAAtB,CAA2B;AAAA,aAAUM,OAAOC,QAAP,KAAoBZ,cAAcY,QAA5C;AAAA,KAA3B,CAAtB;;AAEA,QAAGV,aAAaM,aAAb,IAA8BR,cAAca,KAA5C,IAAqDb,cAAcC,IAAtE,EAA2E;AACzE,UAAG,CAACC,SAAD,IAAc,CAACM,aAAlB,EAAiC;AAC/B,eAAOT,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,kBAAQ,GADkB;AAE1BE,iBAAO;AAFmB,SAArB,CAAP;AAID;AACD,UAAMC,kBAAkBC,0BAAgBC,WAAhB,CAA4BnB,aAA5B,CAAxB;AACA,aAAOD,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BM,cAAM,CAACH,eAAD;AAFoB,OAArB,CAAP;AAID;AACD,WAAOlB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAQ,GADkB;AAE1BE,aAAO;AAFmB,KAArB,CAAP;AAID,GAvBc;AAyBfK,QAzBe,kBAyBRvB,GAzBQ,EAyBHC,GAzBG,EAyBE;AACf,QAAMuB,eAAexB,IAAIyB,MAAJ,CAAWC,UAAhC;AACA,QAAMC,oBAAoBP,0BAAgBQ,KAAhB,CAAsBJ,YAAtB,CAA1B;AACA,QAAIG,iBAAJ,EAAuB;AACrBP,gCAAgBS,aAAhB,CAA8BL,YAA9B;AACA,aAAOvB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BM,cAAM,CAACK,iBAAD;AAFoB,OAArB,CAAP;AAID;AACD,WAAO1B,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAQ,GADkB;AAE1BE,aAAO;AAFmB,KAArB,CAAP;AAID,GAvCc;AAyCfY,UAzCe,oBAyCN9B,GAzCM,EAyCDC,GAzCC,EAyCI;AACjB,QAAMuB,eAAexB,IAAIyB,MAAJ,CAAWC,UAAhC;AACA,QAAMC,oBAAoBP,0BAAgBQ,KAAhB,CAAsBJ,YAAtB,CAA1B;AACA,QAAIG,iBAAJ,EAAuB;AACrBP,gCAAgBW,eAAhB,CAAgCP,YAAhC;AACA,aAAOvB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,gBAAQ,GADkB;AAE1BM,cAAM,CAACK,iBAAD;AAFoB,OAArB,CAAP;AAID;AACD,WAAO1B,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,cAAQ,GADkB;AAE1BE,aAAO;AAFmB,KAArB,CAAP;AAID;AAvDc,CAAjB;;kBA2DepB,Q","file":"questionsControllers.js","sourcesContent":["import usersModels from '../models/usersModels';\r\nimport meetupsModels from '../models/meetupsModels';\r\nimport questionsModels from '../models/questionsModels';\r\n\r\nconst Question = {\r\n  createQuestion(req, res) {\r\n    const bodyOfRequest = req.body;\r\n    const userExist = usersModels.signUsers.find(user => user.userId === bodyOfRequest.user);\r\n    const confirmMeetup = meetupsModels.meetups.find(meetup => meetup.meetupId === bodyOfRequest.meetupId);\r\n\r\n    if(userExist && confirmMeetup && bodyOfRequest.title && bodyOfRequest.body){\r\n      if(!userExist && !confirmMeetup) {\r\n        return res.status(401).json({\r\n          status: 401,\r\n          error: 'Authentication Error!, Please confirm the meetupId and UserId is correct'\r\n        })\r\n      }\r\n      const createdQuestion = questionsModels.askQuestion(bodyOfRequest);\r\n      return res.status(201).json({\r\n        status: 201,\r\n        data: [createdQuestion]\r\n      });\r\n    }\r\n    return res.status(404).json({\r\n      status: 404,\r\n      error: \"No meetups/user with no Id, Please fill all required fields\"\r\n    })\r\n  },\r\n\r\n  upvote(req, res) {\r\n    const idOfQuestion = req.params.questionId;\r\n    const doesQuestionExist = questionsModels.findQ(idOfQuestion);\r\n    if (doesQuestionExist) {\r\n      questionsModels.requestUpvote(idOfQuestion);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: [doesQuestionExist],\r\n      });\r\n    }\r\n    return res.status(404).json({\r\n      status: 404,\r\n      error: 'Not found',\r\n    });\r\n  },\r\n\r\n  downvote(req, res) {\r\n    const idOfQuestion = req.params.questionId;\r\n    const doesQuestionExist = questionsModels.findQ(idOfQuestion);\r\n    if (doesQuestionExist) {\r\n      questionsModels.requestDownvote(idOfQuestion);\r\n      return res.status(200).json({\r\n        status: 200,\r\n        data: [doesQuestionExist],\r\n      });\r\n    }\r\n    return res.status(404).json({\r\n      status: 404,\r\n      error: 'Question Not Found',\r\n    });\r\n  },\r\n\r\n};\r\n\r\nexport default Question;\r\n"]}